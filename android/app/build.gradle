def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.atom.android.chatgpt"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 3
        versionName flutterVersionName
    }

    signingConfigs {
        def keystorePropertiesFile = rootProject.file("key.properties")
        def keystoreProperties = new Properties()

        if (keystorePropertiesFile.exists()) {
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        } else {
            def storePassword = System.getenv('KEY_STORE_PASSWORD')
            def keyPassword = System.getenv('KEY_PASSWORD')
            def keyAlias = System.getenv('KEY_ALIAS')
            def storeFile = System.getenv('KEY_PATH')
            if (storePassword != null) {
                keystoreProperties.setProperty('storePassword', storePassword)
            } else {
                keystoreProperties.setProperty('storePassword', "android")
            }
            if (keyPassword != null) {
                keystoreProperties.setProperty('keyPassword', keyPassword)
            } else {
                keystoreProperties.setProperty('keyPassword', "android")
            }
            if (keyAlias != null) {
                keystoreProperties.setProperty('keyAlias', keyAlias)
            } else {
                keystoreProperties.setProperty('keyAlias', "androiddebugkey")
            }
            if (storeFile != null) {
                keystoreProperties.setProperty('storeFile', storeFile)
            } else {
                keystoreProperties.setProperty('storeFile', "debug.keystore")
            }

        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(path: ':mediator')
    implementation project(path: ':billing')
    implementation project(path: ':base')
    implementation 'com.google.android.gms:play-services-ads:22.1.0'
}
